plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

android {
    namespace 'com.example.pushapkbygradletaskdemo'
    compileSdk 33

    defaultConfig {
        applicationId "com.example.pushapkbygradletaskdemo"
        minSdk 24
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.3.2'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }

    /**
     * Sept 3 配置渠道 (非必须)
     */
    flavorDimensions "channel"
    productFlavors {
        // 生产环境
        produce {
            buildConfigField "String", "HOST", "\"${HOST}\""
        }
        // 预生产环境
        beta {
            buildConfigField "String", "HOST", "\"${HOST_BETA}\""
        }
        // 开发环境
        dev {
            buildConfigField "String", "HOST", "\"${HOST_DEV}\""
        }
        // 测试
        demo {
            buildConfigField "String", "HOST", "\"${HOST_TEST}\""
        }
        productFlavors.all {
                // 遍历 productFlavors 多渠道，设置渠道号
            flavor -> flavor.manifestPlaceholders.put("CHANNEL", name)
        }
    }

    /**
     * Sept 4 创建打包 Task
     * 遍历所有可执行的 variants 创建对应的打包 Task
     * 生成后的路径及名称：Tasks/build/pushApk[productFlavorsName][Release/Debug]
     * eg:Tasks/build/pushApkDevRelease
     */
    android.applicationVariants.all { variant ->
        String taskSuffix = variant.name.capitalize()
        if (taskSuffix.contains("Release") || taskSuffix.contains("Debug")) {
            task("pushApk${taskSuffix}") {
                dependsOn ":app:assemble${taskSuffix}"
                group 'build'
                description 'Custom task for gradle'
                doLast {
                    variant.outputs.all { output ->
                        // 执行脚本任务
                        uploadApk(output.outputFile, taskSuffix)
                    }
                }
            }
        }
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.8.0'
    implementation platform('org.jetbrains.kotlin:kotlin-bom:1.8.0')
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.3.1'
    implementation 'androidx.activity:activity-compose:1.5.1'
    implementation platform('androidx.compose:compose-bom:2022.10.00')
    implementation 'androidx.compose.ui:ui'
    implementation 'androidx.compose.ui:ui-graphics'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    implementation 'androidx.compose.material3:material3'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation platform('androidx.compose:compose-bom:2022.10.00')
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4'
    debugImplementation 'androidx.compose.ui:ui-tooling'
    debugImplementation 'androidx.compose.ui:ui-test-manifest'
}